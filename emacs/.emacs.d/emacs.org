#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
#+STARTUP: indent
#+STARTUP: overview
* Configuring Emacs
This template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for me]]. I have
removed some parts of it that either I didn't think I would need or
didn't understand.
* How to use this configuration
** Obtaining the source
You can find the latest public version of this configuration in [[https://github.com/markblunk/dotfiles][the
Github repository]] The meat of it is right here in this file.
** Installation
This configuration is intended to be installable from scratch.
* Graphics and looks
** Color theme
#+NAME: color-theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :custom
    (solarized-emphasize-indicators nil
     solarized-scale-org-headlines nil)
    :config
    (load-theme 'solarized-dark t))
#+END_SRC
** Font
1. use monospace font (whatever that means)
2. explicitly use _Tex Gyre DejaVu Math-14_ to render small double
   struck Z since it wasn't rendering properly in the GUI
3. add ~:background "undefined"~ in terminal mode to make the
   solarized-dark colors render correctly.
4. ~global-prettify-symbols~ to make some nice symbols (mostly greek
   letters in .tex files).
#+NAME: font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Monospace"
                      :height 140
                      :weight 'normal
                      :width 'normal)

  (if (not (display-graphic-p))
      (set-face-attribute 'default nil
                          :background "undefined"))

  ;; small blackboard letters
  (set-fontset-font "fontset-default"
                    '(#x01D552 . #x01D56B)
                    "Tex Gyre DejaVu Math-14")

  (set-fontset-font "fontset-default"
                    '(#x01D7D8 . #x01D7E1)
                    "Tex Gyre DejaVu Math-14")

  ;; lightbuld
  (set-fontset-font "fontset-default"
                    '#x01F4A1
                    "Symbola-14")

  (global-prettify-symbols-mode +1)

  (set-default-coding-systems 'utf-8)
  (set-language-environment "UTF-8")

  ;; load unicode symbols from external directory
  (load-library "unicode")
#+END_SRC
** Reduce clutter
#+NAME: clutter
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq indicate-buffer-boundaries 'left
        indicate-empty-lines t
        show-trailing-whitespace t
        blink-cursor-mode nil)

  (defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
    "If matching paren is offscreen, show the matching line in the echo area."
    (interactive)
    (let* ((cb (char-before (point)))
           (matching-text (and cb
                               (char-equal (char-syntax cb) ?\) )
                               (blink-matching-open))))
      (when matching-text (message matching-text))))

  (if (window-system)
      (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1))
    (menu-bar-mode -1))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (use-package delight
    :ensure t)

  (use-package abbrev
    :delight abbrev-mode)

  (use-package eldoc
    :delight eldoc-mode)
#+END_SRC
** Git stuff
[[https://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the buffer.
Set up git diffs and buffer position in the fringe.
#+NAME: git
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :delight git-gutter-mode
    :config
    (global-git-gutter-mode t))

  (use-package magit
    :defer t
    :ensure t)

  (use-package git-modes
    :ensure t)

  (use-package gitattributes-mode
    :after git-modes)

  (use-package gitconfig-mode
    :delight
    :after git-modes)

  (use-package gitignore-mode
    :delight
    :after git-modes
    :mode  "/.gitignore_global\\'")
#+END_SRC
** Mode line
Use smart mode line to clean up the modeline display a little.
#+NAME: mode
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :custom
    (column-number-mode t)
    (sml/shorten-directory t)
    (sml/shorten-modes t)
    (sml/no-confirm-load-theme t)
    :config
    (sml/setup))
#+END_SRC
** Scrolling behavior
Replace default keyboard scrolling with a more smooth alternative
#+NAME: scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Buffer names
Setup uniquify so that non-unique buffer names get the parent path
included to make them unique.
#+NAME: buffer-names
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward))
#+END_SRC
** Window systems and terminals
Make mouse clicks work in xterm (and iTerm)
#+NAME: mouse-clicks
#+BEGIN_SRC emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+END_SRC
* Start up
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 140))

  (setq inhibit-startup-screen +1
        ; Faster than the default scp (for small files)
        tramp-default-method "ssh"
        enable-local-variables :all)

  (setq-default indent-tabs-mode nil
                electric-indent-inhibit t
                tab-width 2)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+END_SRC
* Programming
** General programming
#+NAME: programming-setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :delight '(:eval (concat " " (projectile-project-name)))
    :config
    (projectile-mode t))

  (use-package smartparens
    :delight smartparens-mode
    :ensure t
    :config
    (smartparens-global-mode t))

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package highlight-doxygen
    :ensure t
    :hook (c++-ts-mode . highlight-doxygen-mode))

  (use-package yasnippet
    :defer t
    :ensure t
    :delight yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :ensure t)

  ;; make yas-snippet work with treesitter modes
  ;; see https://github.com/joaotavora/yasnippet/issues/1169
  (advice-add
   'yas--modes-to-activate
   :around
   (defun yas--get-snippet-tables@tree-sitter (orig-fn &optional mode)
     (funcall orig-fn
              (or (car (rassq
                        (or mode major-mode) major-mode-remap-alist))
                  mode))))
#+END_SRC

1. ~sudo apt-get install libtree-sitter-dev~
2. Run ~treesit-install-language-grammar~ for every language grammer
   in ~treesit-language-source-alist~.

Note that yasnippet doesn't work now since the modes in the snippets
directory say things like "c++-mode" and not "c++-ts-mode".
See https://github.com/joaotavora/yasnippet/issues/1169 for a workaround.
something like   ~(add-hook 'c++-ts-mode-hook (yas-activate-extra-mode
'c++-mode))~should work but i'm making some silly mistake


#+NAME: treesit
#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (java "https://github.com/tree-sitter/tree-sitter-java")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (rust "https://github.com/tree-sitter/tree-sitter-rust")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  ;; (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

  ;; I shouldn't have to do this but the only way I see to 'load'
  ;; dockerfile-ts-mode is to load dockerfile-mode and then remap. Ditto
  ;; for cmake-mode.

  (use-package dockerfile-mode
    :defer t
    :ensure t)

  (use-package cmake-mode
    :load-path "/usr/share/emacs/site-lisp/elpa-src/cmake-mode-3.22.1"
    :mode "CMakeLists\\.txt\\'")

  (setq major-mode-remap-alist
        '((sh-mode . bash-ts-mode)
          (c++-mode . c++-ts-mode)
          (c-or-c++-mode . c-or-c++-ts-mode)
          (c-mode . c-ts-mode)
          (cmake-mode . cmake-ts-mode)
          (dockerfile-mode . dockerfile-ts-mode)
          (java-mode . java-ts-mode)
          (js-json-mode . json-ts-mode)
          (python-mode . python-ts-mode)
          (rust-mode . rust-ts-mode)
          (conf-toml-mode . toml-ts-mode)))

  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'"                       . yaml-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.clang-\\(?:tidy\\|format\\)\\'" . yaml-ts-mode))
#+END_SRC

[[https://github.com/mads-hartmann/bash-language-server][bash lsp]] installation
#+BEGIN_SRC shell
npm i -g bash-language-server
#+END_SRC
Added [[https://github.com/regen100/cmake-language-server][cmake language server]] in a conda environment, and installed it
with the following:
#+BEGIN_SRC shell
  conda create --name lsp
  conda activate lsp
  conda install pip
  pip install cmake-language-server
  conda install -c conda-forge python-lsp-server[all]
#+END_SRC

Using [[https://github.com/python-lsp/python-lsp-server][python lsp server]] as the LSP server for Python. See
[[https://github.com/python-lsp/python-lsp-server/blob/develop/pylsp/config/schema.json][configuration]] for more details.

#+NAME: error-checking
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure flycheck-color-mode-line
    :no-require t
    :delight flycheck-mode
    :hook ((Texinfo-mode emacs-lisp-mode)
           (flycheck-mode . flycheck-color-mode-line-mode))

    :custom
    (flycheck-checker-error-threshold 2000))


  (add-to-list 'exec-path
               (concat (getenv "HOME")
                       "/miniconda3/envs/lsp/bin"))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((c-mode c-ts-mode c++-mode c++-ts-mode) .
                   ("clangd" "-background-index" "-clang-tidy"
                    "-suggest-missing-includes"
                    "-completion-style=detailed")))
    (add-to-list 'eglot-server-programs
                 '((python-mode python-ts-mode) .
                   ("pylsp"))))

  (use-package which-key
    :ensure t
    :config (which-key-mode)
    :delight which-key-mode)
#+END_SRC

#+NAME: auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :delight company-mode
    :commands global-company-mode
    :hook (after-init . global-company-mode)
    :custom
    (company-tooltip-align-annotations t))
#+END_SRC
** CMake

** C
Nothing right now
** Cpp
+To get ccls to behave correctly I followed the build & install+
+sections of [[https://github.com/MaskRay/ccls/wiki][this wiki]], and then added a file named [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][.ccls]] in the root
directory of every project.+ Actually, now that I've installed [[https://github.com/rizsotto/Bear][Bear]], I
can use clangd for the autotools projects. So I don't need ccls
anymore!

#+NAME: cpp
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :delight modern-c++-font-lock-mode
    :hook (c++-ts-mode . modern-c++-font-lock-mode))
#+END_SRC
** Emacs-Lisp
For emacs-lisp code, use paredit for dealing with parentheses.
#+NAME: elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :delight paredit-mode
    :commands enable-paredit-mode
    :config (autoload 'enable-paredit-mode "paredit"
              "Turn on pseudo-structural editing of Lisp code." t)
    :hook (emacs-lisp-mode . enable-paredit-mode))
#+END_SRC
** Latex
#+NAME: latex
#+BEGIN_SRC emacs-lisp
  ;; (use-package latex-pretty-symbols
  ;;   :ensure t)

  (setq latex-run-command "pdflatex")

  (use-package auctex
    :defer t
    :ensure t
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil))

  (use-package cdlatex
    :ensure t
    :delight org-cdlatex-mode
    :hook ((LaTeX-mode . cdlatex-mode)
           (org-mode . org-cdlatex-mode)))
#+END_SRC
** Python
#+NAME: python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :custom
    (python-indent-offset 4)
    (tab-stop-list (number-sequence 4 120 4)))
#+END_SRC

** Misc
***  Used
[[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs][rust with emacs]]
#+NAME: misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

  (use-package adoc-mode
    :defer t
    :ensure t)

  (use-package autoconf
    :delight autoconf-mode)

  (use-package autorevert
    :delight auto-revert-mode)

  (use-package bash-completion
    :ensure t
    :config (bash-completion-setup))

  (use-package gnuplot-mode
    :ensure t
    :mode "\\.gnuplot\\'")

  (use-package hcl-mode
    :defer t
    :ensure t)

  (use-package mermaid-mode
    :defer t
    :ensure t
    :delight)

  (use-package nxml-mode
    :delight)

  (use-package sage-shell-mode
    :defer t
    :ensure t)

  (use-package sql-indent
    :ensure t
    :delight sqlind-minor-mode
    :commands sqlind-minor-mode
    :hook (sql-mode . sqlind-minor-mode))

  (use-package graphviz-dot-mode
    :defer t
    :ensure t
    :custom
    (graphviz-dot-indent-width 4))

  (use-package cargo
    :ensure t
    :delight cargo-minor-mode
    :hook (rust-ts-mode . cargo-minor-mode))
#+END_SRC
***  Unused
[[https://github.com/FStarLang/FStar/blob/master/INSTALL.md#opam-package][Fstar installation instructions]]
#+NAME: misc-unused
#+BEGIN_SRC emacs-lisp
  (use-package antlr-mode
    :mode "\\.g4\\'")

  (use-package bison-mode
    :ensure t)

  (use-package csv-mode
    :ensure t)

  (use-package flatbuffers-mode
    :ensure t)

  (use-package fstar-mode
    :ensure t
    :mode ("\\.fs?\\'" . fstar-mode))

  (use-package gradle-mode
    :ensure t
    :mode "\\.gradle\\'")

  (use-package haskell-mode
    :ensure t
    :delight)

  (use-package kotlin-mode
    :ensure t
    :delight)

  (use-package lean-mode
    :ensure t
    :delight)

  (use-package tuareg
    :defer t
    :ensure t
    :delight)

  (use-package company-lean
    :ensure t
    :after (lean-mode company))

  (use-package proof-general
    :ensure t)

  (use-package scala-mode
    :ensure t)
#+END_SRC
* Global key bindings
Some miminal global key bindings. Consult [[https://www.masteringemacs.org/article/my-emacs-keybindings][Mastering Emacs]] for some
more ideas.
#+NAME: global-keys
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-c q" 'delete-indentation)
#+END_SRC
* Global navigation
Set emacs configuration file location, and bind that function.
#+NAME: global-navigation
#+BEGIN_SRC emacs-lisp
  (defun mb-org-work ()
    "Open work org file."
    (interactive)
    (find-file (concat (getenv "HOME") "/org/work.org")))
  (global-set-key "\C-cw" 'mb-org-work)

  (defun mb-org-personal ()
    "Open personal org file."
    (interactive)
    (find-file (concat (getenv "HOME") "/org/personal.org")))
  (global-set-key "\C-cp" 'mb-org-personal)

  (defun mb-edit-emacs-configuration ()
    "Open Emacs configuration file."
    (interactive)
    (find-file (concat (getenv "HOME") "/.emacs.d/emacs.org")))
  (global-set-key "\C-ce" 'mb-edit-emacs-configuration)

  (use-package ido
    :ensure t
    :custom
    (ido-enable-flex-matching t)
    (ido-everywhere t)
    (ido-file-extensions-order
     '(".cpp" ".hpp" ".c" ".h" ".py" ".sh" ".org" ".tex" ".el"))
    (ido-ignore-extensions t)
    (ido-mode "both")
    (ido-use-filename-at-point 'guess))

  (use-package ido-yes-or-no
    :ensure t
    :after ido
    :custom (ido-yes-or-no-mode t))

  (transient-mark-mode t) ;; No region when it is not highlighted

#+END_SRC
* Backups
Save all backups to a universal location
#+NAME: global-backup
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
   ;; this doesn't work for some reason
   ;; backup-directory-alist '(("." . (concat (getenv "HOME") "/.emacs.d/backup/persave")))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   vc-make-backup-files t)
#+END_SRC
* Org Mode
Short key bindings for capturing notes/links and switching to agenda.
#+NAME: org-commands
#+BEGIN_SRC emacs-lisp
  (use-package org
    :delight
    :bind (("\C-cl" . org-store-link)
           ("\C-cc" . org-capture)
           ("\C-ca" . org-agenda))
    :custom
    (org-directory (concat (getenv "HOME") "/org"))
    (org-archive-location (concat org-directory "/archive.org::"))
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-agenda-files (list org-directory))
    (org-babel-python-command (concat (getenv "HOME") "/miniconda3/envs/lsp/bin/python"))
    (org-log-done 'time)
    (org-refile-targets '((nil :level . 1) (org-agenda-files :level . 1)))
    (org-src-fontify-natively t)
    (org-todo-keywords '((sequence "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELED(c)")
                         (sequence "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
    (org-export-backends '(ascii beamer html latex md texinfo))
    (org-babel-load-languages  '((emacs-lisp . t)
                                   (shell . t)
                                   (sql . t)
                                   (python . t)
                                   (latex . t))))

  (use-package org-indent :delight)
#+END_SRC
* Other libraries
Make sure /.class.d/ files are ignored (/.class/ files are already
ignored) in [[info:emacs#Dired][dired-mode]] (the mode of the minibuffer when trying to find
a file with ~\C-x\C-f~).
#+NAME: dired-omit
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :custom
    (completion-ignored-extensions
     (append '("target" ".settings/" ".out"
               ".libs/" ".idea/" ".deps/"
               ".dirstamp" ".class.d/")
             completion-ignored-extensions)))

  (use-package dired-x
    :hook ((dired-mode . dired-omit-mode)))
#+END_SRC

view manpages inside emacs for greater readability.
#+NAME: man
#+BEGIN_SRC emacs-lisp
  (use-package man-addons
    :load-path "/usr/share/doc/manpages")
#+END_SRC

Use treemacs for exploring projects/workspaces.
#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :ensure t
    :custom
    (treemacs-width 30)
    (treemacs-show-hidden-files nil)
    :config
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "custom ignored files"
                   (or
                    ;; java stuff
                    (string-match "\\`[a-zA-Z]+\\(\\$[0-9]+\\)?\\.class\\(\\.d\\)?\\'" filename)
                    (string-match "\\`\\.settings\\'" filename)
                    (string-match "\\`target\\'" filename)
                    ;; autotools
                    (string-match "\\`[-_A-Za-z0-9]+\\.\\(l\\|s\\)?o\\'" filename)
                    (string-match "\\`\\.\\(dep\\|lib\\)s\\'" filename)
                    ;; random stuff
                    (string-match "\\`\\.dirstamp\\'" filename)
                    (string-match "\\`[-_A-Za-z0-9]+\\.cache\\'" filename)
                    (string-match "\\`\\.clangd\\'" filename)
                    (string-match "\\`[-_A-Za-z0-9]+\\.iml\\'" filename)
                    (string-match "\\`\\.idea\\'" filename)))))
#+END_SRC

Use [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] to keep packages up to date.
#+NAME: update-packages
#+BEGIN_SRC emacs-lisp
  (use-package package
    :custom
    (package-archives
     '(("nongnu"   . "https://elpa.nongnu.org/nongnu/")
       ("gnu"   . "https://elpa.gnu.org/packages/")
       ("melpa" . "https://melpa.org/packages/"))
     "add melpa to the list of archives to search for packages"))

  (use-package auto-package-update
    :ensure t
    :config
    (auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t)
    (auto-package-update-interval 14)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t))
#+END_SRC

#+NAME: mastodon
#+BEGIN_SRC emacs-lisp
  (use-package mastodon
    :ensure t
    :custom
      (mastodon-instance-url "https://mathstodon.xyz")
      (mastodon-active-user "mibbles")
      )
#+END_SRC

* External
External packages may be dropped in the [[file:./external][external]] directory.
#+NAME: external
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat (getenv "HOME") "/.emacs.d/external"))
#+END_SRC
* Options set using the customize interface
By default, Emacs saves the options you set via the `customize-*`
functions in the user init file, which is "$HOME/.emacs.d/init.el" in
this setup. Instead, put it in a separate file, which we create if
it's not there, by first creating an empty file and then loading the
needed content. Of course, almost all of our custom variables are set
with use-package, but there are a couple left and this way they don't
clutter up the other files.
#+NAME: customize-config
#+BEGIN_SRC emacs-lisp
  (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (shell-command (concat "touch " custom-file)))
  (load custom-file)
#+END_SRC
* Configuration file layout
Define the emacs.el file that gets generated by the code in
this org file.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
  ;;; dotemacs --- Autogenerated emacs.el via org-babel

  ;;; Commentary:
  ;; Do not modify this file by hand.  It was automatically generated
  ;; from `emacs.org` in the same directory.  See that file for more
  ;; information.

  ;;; Code:
  <<customize-config>>

  <<update-packages>>

  <<startup>>

  <<external>>

  <<color-theme>>

  <<font>>

  <<clutter>>

  <<git>>

  <<mode>>

  <<scroll>>

  <<buffer-names>>

  <<mouse-clicks>>

  <<global-keys>>

  <<global-navigation>>

  <<global-backup>>

  <<programming-setup>>

  <<treesit>>

  <<error-checking>>

  <<auto-complete>>

  <<cpp>>

  <<elisp>>

  ;;  <<latex>>

  <<python>>

  <<misc>>

  ;; this should always be commented out since it's 'unused'
  ;;  <<misc-unused>>

  <<org-commands>>

  <<dired-omit>>

  <<man>>

  <<treemacs>>

  <<mastodon>>

  ;;; emacs.el ends here
#+END_SRC
