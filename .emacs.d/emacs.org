#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
#+STARTUP: indent
#+STARTUP: overview
* Configuring Emacs
This template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for me]]. I have
removed some parts of it that either I didn't think I would need or
didn't understand.
* How to use this configuration
** Obtaining the source
You can find the latest public version of this configuration in [[https://github.com/markblunk/dotfiles][the
Github repository]] The meat of it is right here in this file.
** Installation
This configuration is intended to be installable from scratch.
* Graphics and looks
** Color theme
#+NAME: color-theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-emphasize-indicators nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC
** Font
1. use monospace font (whatever that means)
2. explicitly use _Tex Gyre DejaVu Math-14_ to render small double
   struck Z since it wasn't rendering properly in the GUI
3. add ~:background "undefined"~ in terminal mode to make the
   solarized-dark colors render correctly.
#+NAME: font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Monospace"
                      :height 140
                      :weight 'normal
                      :width 'normal)

  (if (not (display-graphic-p))
      (set-face-attribute 'default nil
                          :background "undefined"))


                                          ; small blackboard letters
  (set-fontset-font "fontset-default"
                    '(#x01D552 . #x01D56B)
                    "Tex Gyre DejaVu Math-14")

  (set-fontset-font "fontset-default"
                    '(#x01D7D8 . #x01D7E1)
                    "Tex Gyre DejaVu Math-14")

                                          ; lightbuld
  (set-fontset-font "fontset-default"
                    '#x01F4A1
                    "Symbola-14")

  (if (or
       (> emacs-major-version 24)
       (and
        (= emacs-major-version 24)
        (>= emacs-minor-version 4)))
      (global-prettify-symbols-mode +1))

  (set-default-coding-systems 'utf-8)
  (set-language-environment "UTF-8")


#+END_SRC
** Reduce clutter
#+NAME: clutter
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode nil)
  (show-paren-mode t)
  (setq indicate-buffer-boundaries 'left
        indicate-empty-lines t)


  (defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
    "If the matching paren is offscreen, show the matching line in the echo area.
    Has no effect if the character before point is not of the syntax class ')'."
    (interactive)
    (let* ((cb (char-before (point)))
           (matching-text (and cb
                               (char-equal (char-syntax cb) ?\) )
                               (blink-matching-open))))
      (when matching-text (message matching-text))))

  (if (window-system)
      (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1))
    (menu-bar-mode -1))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (use-package delight
    :ensure t)

  (use-package abbrev
    :delight abbrev-mode)

  (use-package eldoc
    :delight eldoc-mode)
#+END_SRC
** Git stuff
[[https://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the buffer.
Set up git diffs and buffer position in the fringe.
#+NAME: git
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :delight git-gutter-mode
    :config
    (global-git-gutter-mode t))

  (use-package magit
    :ensure t)

  (use-package gitattributes-mode
    :ensure t)

  (use-package gitconfig-mode
    :delight
    :ensure t)

  (use-package gitignore-mode
    :delight
    :ensure t
    :mode "\\.gitignore_global\\'")
#+END_SRC
** Mode line
Use smart mode line to clean up the modeline display a little.
#+NAME: mode
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (setq
     column-number-mode t
     sml/shorten-directory t
     sml/shorten-modes t
     sml/no-confirm-load-theme t)
    (sml/setup))
#+END_SRC
** Scrolling behavior
Replace default keyboard scrolling with a more smooth alternative
#+NAME: scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Buffer names
Setup uniquify so that non-unique buffer names get the parent path
included to make them unique.
#+NAME: buffer-names
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward))
#+END_SRC
** Window systems and terminals
Make mouse clicks work in xterm (and iTerm)
#+NAME: mouse-clicks
#+BEGIN_SRC emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+END_SRC
* Start up
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 140))

  (setq inhibit-startup-screen +1)
  (setq-default
   indent-tabs-mode nil
   show-trailing-whitespace t
   electric-indent-inhibit t
   tab-width 4)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))

  (setq tramp-default-method "ssh")

  (setq enable-local-variables :all)
#+END_SRC
* Programming
** General programming
#+NAME: programming-setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :delight '(:eval (concat " " (projectile-project-name)))
    :config
    (projectile-mode t))

  (use-package smartparens
    :delight smartparens-mode
    :ensure t
    :config
    (smartparens-global-mode t))

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package yasnippet
    :ensure t
    :delight yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

[[https://github.com/mads-hartmann/bash-language-server][bash lsp]] installation: ~npm i -g bash-language-server~
#+NAME: error-checking
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure flycheck-color-mode-line
    :no-require t
    :delight flycheck-mode
    :hook ((python-mode . flycheck-mode)
                                          ;           (Texinfo-mode . flycheck-mode)
           (c-mode . flycheck-mode)
           (emacs-lisp-mode . flycheck-mode)
           (flycheck-mode . flycheck-color-mode-line-mode))

    :custom
    (flycheck-checker-error-threshold 2000)
    (flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

  (use-package lsp-mode
    :ensure t
    :after (company which-key)
    :commands lsp
    :hook
    ((c++-mode . lsp)
;     (haskell-mode . lsp)
;     (haskell-literate-mode . lsp)
     (java-mode . lsp)
     (rust-mode . lsp)
     (sh-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))

    :custom
    (lsp-response-timeout 60)
    (lsp-auto-guess-root t)
    (lsp-file-watch-threshold 100000)
    (lsp-clients-clangd-args (quote ("-background-index" "-clang-tidy"
                                     "-suggest-missing-includes"
                                     "-completion-style=detailed")))
    (lsp-before-save-edits nil)
    (lsp-lens-enable nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t))

  (use-package lsp-ui
    :ensure t
    :after (lsp-mode flycheck)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-flycheck-list-position 'right)
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-show-directory t)
    (lsp-ui-peek-list-width 60)
    (lsp-ui-peek-peek-height 25)
    (lsp-ui-sideline-enable nil)
    :bind
    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ([remap xref-find-references] .  lsp-ui-peek-find-references))

  (use-package dap-mode
    :ensure t
    :config
    (dap-mode 1)
    (dap-ui-mode 1))

  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :delight which-key-mode)
#+END_SRC

#+NAME: auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :delight company-mode
    :commands global-company-mode
    :hook (after-init . global-company-mode)
    :custom
    (company-tooltip-align-annotations t))
#+END_SRC
** C
Nothing right now
** Cpp
+To get ccls to behave correctly I followed the build & install+
+sections of [[https://github.com/MaskRay/ccls/wiki][this wiki]], and then added a file named [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][.ccls]] in the root
directory of every project.+ Actually, now that I've installed [[https://github.com/rizsotto/Bear][Bear]], I
can use clangd for the autotools projects. So I don't think I need
ccls anymore!

*cmake-mode.el* comes installed via ~apt install cmake~
#+NAME: cpp
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :load-path "/usr/share/emacs/site-lisp")

  (use-package modern-cpp-font-lock
    :ensure t
    :delight modern-c++-font-lock-mode
    :hook (c++-mode . modern-c++-font-lock-mode))

  (use-package highlight-doxygen
    :ensure t
    :config (highlight-doxygen-global-mode 1))

  (use-package bison-mode
    :ensure t)
#+END_SRC
** Emacs-Lisp
For emacs-lisp code, use paredit for dealing with parentheses.
#+NAME: elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :delight paredit-mode
    :commands enable-paredit-mode
    :config (autoload 'enable-paredit-mode "paredit"
              "Turn on pseudo-structural editing of Lisp code."   t)
    :hook (emacs-lisp-mode . enable-paredit-mode))
#+END_SRC
** Latex
#+NAME: latex
#+BEGIN_SRC emacs-lisp
  (use-package latex-pretty-symbols
    :ensure t)

  (use-package auctex
    :defer t
    :ensure t
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil))

  ;; (use-package cdlatex
  ;;   :ensure t
  ;;   :delight cdlatex-mode
  ;;   :hook ((LaTeX-mode . cdlatex-mode)
  ;;          (org-mode . org-cdlatex-mode)))
#+END_SRC
** Python
+ I had to run ~lsp-python-ms-update-server~ first (auto-install
  wasn't working) but now that the server is installed setting that
  variable seems to work ok.
+ The ~hack-local-variables-hook~ hack is copied from [[https://emacs-lsp.github.io/lsp-python-ms/#faq][lsp notes]], so
  that lsp looks for the virtualenv executable in /.dir-locals.el/ for
  something like ~(python-mode . ((lsp-python-ms-python-executable
  . "/PATH/TO/VENV/PYTHONBINARY")))~

#+NAME: python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :config
    (setq python-indent-offset 4
          tab-stop-list (number-sequence 4 120 4)))

  ;; (use-package highlight-indentation
  ;;   :ensure t
  ;;   :after python
  ;;   :hook (python-mode . highlight-indentation-mode)
  ;;   :config (set-face-background 'highlight-indentation-face "DarkRed"))

  ;; (use-package lsp-python-ms
  ;;   :ensure t
  ;;   :init (setq lsp-python-ms-auto-install-server t))

  ;; (add-hook 'hack-local-variables-hook
  ;;           (lambda ()
  ;;             (when (derived-mode-p 'python-mode)
  ;;               (require 'lsp-python-ms)
  ;;               (lsp))))

#+END_SRC
** Haskell
+ Use haskell-mode for [[https://bitbucket.org/aseemr/wysteria/wiki/Home][Wysteria]]
+ to get lsp-haskell to behave, I have to first set the version of ghc
  used by ghcup (e.g. ~ghcup set ghc 8.10.2~) to match the version
  used in a particular project. Setting the custom variable
  ~lsp-haskell-server-path~ should work directly without having to
  mess around with ghcup, but I couldn't get it to work as
  expected. So I ended up setting that variable per haskell project in
  ~.dir-locals.el~, and thus I have to add that hook here like I did
  for python.
#+NAME: haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :delight
                                          ;  :mode "\\.wy.*\\'"
                                          ;    :custom    (haskell-font-lock-symbols t)
    )

  ;; (use-package lsp-haskell
  ;;   :ensure t
  ;;   :delight
  ;;   :after (haskell-mode lsp-mode)

  ;;   :init
  ;;   (add-hook 'hack-local-variables-hook
  ;;             (lambda () (when (derived-mode-p 'haskell-mode)) (lsp))))

  ;; (use-package wizpl-mode
  ;;   :load-path "external"
  ;;   :after haskell
  ;;   )

  (load-library "wizpl-mode")

#+END_SRC

** Misc

***  Used
#+NAME: misc
#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :ensure t
    :delight
    :mode "\\.adoc\\'")

  (use-package antlr-mode
    :mode "\\.g4\\'")

  (use-package autoconf
    :delight autoconf-mode)

  (use-package autorevert
    :delight auto-revert-mode)

  (use-package dockerfile-mode
    :ensure t)

  (use-package flatbuffers-mode
    :ensure t)

  (use-package json-mode
    :ensure t
    :delight)

  (use-package markdown-mode
    :ensure t
    :delight)

  (use-package nxml-mode
    :delight)

  (use-package sql-indent
    :ensure t
    :delight sqlind-minor-mode
    :commands sqlind-minor-mode
    :hook (sql-mode . sqlind-minor-mode))

  (use-package tuareg
    :ensure t
    :delight)

  (use-package yaml-mode
    :ensure t
    :mode "\\.clang-format\\'")
  ; be sure to add this line in lsp-mode if you use this
  ; (java-mode . lsp)
   (use-package lsp-java
     :ensure t
     :after lsp-mode)
#+END_SRC
   + [[https://github.com/FStarLang/FStar/blob/master/INSTALL.md#opam-package][Fstar installation instructions]]
***  Unused
[[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs][rust with emacs]]
#+NAME: misc-unused
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t)

  (use-package fstar-mode
    :ensure t
    :mode ("\\.fs?\\'" . fstar-mode))

  (use-package groovy-mode
    :ensure t)

  (use-package lean-mode
    :ensure t
    :delight)

  (use-package company-lean
    :ensure t
    :after (lean-mode company))

  (use-package js2-mode
    :ensure t
    :mode "\\.js[x]?\\'")

  (use-package proof-general
    :ensure t)

  (defun mb/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm
    (setq-local buffer-save-without-query t))

  (use-package rustic
    :ensure t
    :after lsp-mode
                                          ;    :mode "\\.rs\\'"
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'mb/rustic-mode-hook))


  (use-package cargo
    :ensure t
    :delight cargo-minor-mode
    :hook (rust-mode . cargo-minor-mode))

  (use-package scala-mode
    :ensure t)
#+END_SRC
* Global key bindings
Some miminal global key bindings. Consult [[https://www.masteringemacs.org/article/my-emacs-keybindings][Mastering Emacs]] for some
more ideas.
#+NAME: global-keys
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-c q" 'delete-indentation)
#+END_SRC
* Global navigation
Set emacs configuration file location, and bind that function.
#+NAME: global-navigation
#+BEGIN_SRC emacs-lisp
  (defun mb-edit-emacs-configuration ()
    "Open Emacs configuration file."
    (interactive)
    (find-file (concat (getenv "HOME") "/.emacs.d/emacs.org")))
  (global-set-key "\C-ce" 'mb-edit-emacs-configuration)

  (use-package ido
    :ensure t
    :config
    (ido-mode 1) ; this has to be 1. it will break if you use 't' here
    :custom
    (ido-enable-flex-matching t)
    (ido-ignore-extensions t)
    (ido-everywhere t)
    (ido-file-extensions-order '(".c" ".cpp" ".el" ".java" ".sh" ".ac" ".org" ".tex")))

  (use-package ido-yes-or-no
    :ensure t
    :after ido
    :custom (ido-yes-or-no-mode t))

  (transient-mark-mode t) ;; No region when it is not highlighted

#+END_SRC
* Backups
Save all backups to a universal location
#+NAME: global-backup
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
   ;; this doesn't work for some reason
   ;; backup-directory-alist '(("." . (concat (getenv "HOME") "/.emacs.d/backup/persave")))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   vc-make-backup-files t)

;  (use-package no-littering
;    :ensure t)
#+END_SRC
* Org Mode
Short key bindings for capturing notes/links and switching to agenda.
#+NAME: org-commands
#+BEGIN_SRC emacs-lisp
  (use-package org
    :delight
    :ensure org-plus-contrib
    :bind (("\C-cl" . org-store-link)
           ("\C-cc" . org-capture)
           ("\C-ca" . org-agenda))
    :config
    (setq org-directory (concat (getenv "HOME") "/org")
          org-archive-location (concat org-directory "/archive.org::")
          org-default-notes-file (concat org-directory "/notes.org")
          org-agenda-files (list org-directory)
          org-babel-python-command (concat (getenv "HOME") "/.virtualenvs/emacs/bin/python")
          org-log-done 'time
          org-refile-targets '((nil :level . 1) (org-agenda-files :level . 1))
          org-src-fontify-natively t
          org-todo-keywords '((sequence "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELED(c)")
                              (sequence "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell . t)
                                   (sql . t)
                                   (python . t)
                                   (latex . t)))
    :custom
    (org-export-backends '(ascii beamer html latex md texinfo)))
#+END_SRC
* Other libraries
Make sure /.class.d/ files are ignored (/.class/ files are already
ignored) in [[info:emacs#Dired][dired-mode]] (the mode of the minibuffer when trying to find
a file with ~\C-x\C-f~).
#+NAME: dired-omit
#+BEGIN_SRC emacs-lisp
  (push ".class.d/" completion-ignored-extensions)
  (push ".dirstamp" completion-ignored-extensions)
  (push ".deps/" completion-ignored-extensions)
  (push ".idea/" completion-ignored-extensions)
  (push ".libs/" completion-ignored-extensions)
  (push ".out" completion-ignored-extensions)
  (push ".settings/" completion-ignored-extensions)
  (push "target" completion-ignored-extensions)

  (use-package dired-x
    :config (setq dired-omit-mode t))
#+END_SRC

view manpages inside emacs for greater readability.
#+NAME: man
#+BEGIN_SRC emacs-lisp
  (use-package man-addons
    :load-path "/usr/share/doc/manpages")
#+END_SRC

Use treemacs for exploring projects/workspaces.
#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (setq
     treemacs-width 30
     treemacs-show-hidden-files nil)
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore compiled java class files"
                   (or
                    (string-match "\\`[a-zA-Z]+\\(\\$[0-9]+\\)?\\.class\\(\\.d\\)?\\'" filename)
                    (string-match "\\`\\.settings\\'" filename)
                    (string-match "\\`target\\'" filename)
                    )))
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore compiled autotools files"
                   (or
                    (string-match "\\`[-_A-Za-z0-9]+\\.\\(l\\|s\\)?o\\'" filename)
                    (string-match "\\`\\.\\(dep\\|lib\\)s\\'" filename)
                    (string-match "\\`\\.dirstamp\\'" filename))))
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore random files"
                   (or
                    (string-match "\\`[-_A-Za-z0-9]+\\.cache\\'" filename)
                    (string-match "\\`\\.clangd\\'" filename)
                    (string-match "\\`[-_A-Za-z0-9]+\\.iml\\'" filename)
                    (string-match "\\`\\.idea\\'" filename)))))
#+END_SRC

Use [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] to keep packages up to date.
#+NAME: update-packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq
     auto-package-update-delete-old-versions t
     auto-package-update-hide-results t
     auto-package-update-prompt-before-update t
     auto-package-update-interval 14)
    (auto-package-update-maybe))
#+END_SRC

* External
External packages may be dropped in the [[file:./external][external]] directory.
#+NAME: external
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat (getenv "HOME") "/.emacs.d/external"))
#+END_SRC
* Options set using the customize interface
By default, Emacs saves the options you set via the `customize-*`
functions in the user init file, which is "$HOME/.emacs.d/init.el" in
this setup. Instead, put it in a separate file, which we create if
it's not there, by first creating an empty file and then loading the
needed content. Of course, almost all of our custom variables are set
with use-package, but there are a couple left and this way they don't
clutter up the other files.
#+NAME: customize-config
#+BEGIN_SRC emacs-lisp
  (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (shell-command (concat "touch " custom-file)))
  (load custom-file)
#+END_SRC
* Configuration file layout
Define the emacs.el file that gets generated by the code in
this org file.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
  ;;; dotemacs --- Autogenerated emacs.el via org-babel

  ;;; Commentary:
  ;; Do not modify this file by hand.  It was automatically generated
  ;; from `emacs.org` in the same directory.  See that file for more
  ;; information.

  ;;; Code:
  <<customize-config>>

  <<update-packages>>

  <<external>>

  <<color-theme>>

  <<font>>

  <<clutter>>

  <<git>>

  <<mode>>

  <<scroll>>

  <<buffer-names>>

  <<mouse-clicks>>

  <<global-keys>>

  <<global-navigation>>

  <<global-backup>>

  <<programming-setup>>

  <<error-checking>>

  <<auto-complete>>

  ;;  <<c>>

  <<cpp>>

  <<elisp>>

  <<latex>>

  <<python>>

  <<haskell>>

  <<misc>>

  ;; this should always be commented out since it's 'unused'
  ;;  <<misc-unused>>

  <<org-commands>>

  <<dired-omit>>

  <<man>>

  <<treemacs>>

  <<startup>>
  ;;; emacs.el ends here
#+END_SRC
